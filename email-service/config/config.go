package config

import (
	"os"
	"strconv"
	"github.com/joho/godotenv"
)

type ConfigType struct {
	DATABASE_URL string
	JWT_SECRET_KEY string
	DATABASE_USER string
	DATABASE_PASSWORD string
	DATABASE_NAME string
	ACCESS_TOKEN_EXPIRY int
	REFRESH_TOKEN_EXPIRY int
	CLOUDINARY_CLOUD_NAME string
	CLOUDINARY_API_KEY string
	CLOUDINARY_API_SECRET string
	CLOUDINARY_URL string
	SMTP_HOST string
	SMTP_PASSWORD string
	SMTP_USER string
	SMTP_PORT int
}

func GetConfig () ConfigType {
	godotenv.Load(".env")

	var DATABASE_USER = os.Getenv("POSTGRES_USER")
	var DATABASE_PASSWORD = os.Getenv("POSTGRES_PASSWORD")
	var DATABASE_NAME = os.Getenv("POSTGRES_DB")
	var DATABASE_URL = os.Getenv("DATABASE_URL")
	var JWT_SECRET_KEY = os.Getenv("JWT_SECRET_KEY")
	var CLOUDINARY_CLOUD_NAME = os.Getenv("CLOUDINARY_CLOUD_NAME")
	var CLOUDINARY_API_KEY = os.Getenv("CLOUDINARY_API_KEY")
	var CLOUDINARY_API_SECRET = os.Getenv("CLOUDINARY_API_SECRET")
	var CLOUDINARY_URL = os.Getenv("CLOUDINARY_URL")
	var ACCESS_TOKEN_EXPIRY, _ = strconv.Atoi(os.Getenv("ACCESS_TOKEN_EXPIRY"))
	var REFRESH_TOKEN_EXPIRY, _ = strconv.Atoi(os.Getenv("REFRESH_TOKEN_EXPIRY"))
	var SMTP_HOST = os.Getenv("SMTP_HOST")
	var SMTP_PASSWORD = os.Getenv("SMTP_PASSWORD")
	var SMTP_USER = os.Getenv("SMTP_USER")
	var SMTP_PORT, _ = strconv.Atoi(os.Getenv("SMTP_PORT"))

	return ConfigType{
		DATABASE_URL: DATABASE_URL,
		JWT_SECRET_KEY: JWT_SECRET_KEY,
		ACCESS_TOKEN_EXPIRY: ACCESS_TOKEN_EXPIRY,
		REFRESH_TOKEN_EXPIRY: REFRESH_TOKEN_EXPIRY,
		DATABASE_USER: DATABASE_USER,
		DATABASE_PASSWORD: DATABASE_PASSWORD,
		DATABASE_NAME: DATABASE_NAME,
		CLOUDINARY_CLOUD_NAME: CLOUDINARY_CLOUD_NAME,
		CLOUDINARY_API_KEY: CLOUDINARY_API_KEY,
		CLOUDINARY_API_SECRET: CLOUDINARY_API_SECRET,
		CLOUDINARY_URL: CLOUDINARY_URL,
		SMTP_HOST: SMTP_HOST,
		SMTP_PASSWORD: SMTP_PASSWORD,
		SMTP_USER: SMTP_USER,
		SMTP_PORT: SMTP_PORT,
	}
}